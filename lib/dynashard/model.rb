module Dynashard
  module ActiveRecordExtensions
    def self.extended(base)
      base.extend(ClassMethods)

      # Change ActiveRecord::Base.arel_engine to create an engine for sharded models
      # rather than using the ActiveRecord::Base class.
      base.module_eval do
        def self.arel_engine
          if sharding_enabled?
            Arel::Sql::Engine.new(self)
          elsif self == ActiveRecord::Base
            Arel::Table.engine
          else
            connection_handler.connection_pools[name] ? Arel::Sql::Engine.new(self) : superclass.arel_engine
          end
        end
      end
    end

    module ClassMethods
      # Configure sharding for the current model.  The following options are supported:
      # * +:by => :context+ - the database connection for this model will be determined using a connection
      #   proxy with the specified context.
      # * +:associated, :using => :method+ - the database connection for associated models with sharding
      #   enabled will be determined using the association's defined context after first setting that
      #   context using the specified method on the current instance
      #
      #   class MyModel < ActiveRecord::Base
      #     shard :by => :context
      #     shard :assocated, :using => :sharding_method
      #   end
      #
      #   def sharding_method
      #     # return a valid shard descriptor:
      #     # - a string key into the configurations in databases.yml
      #     # - a hash with connection parameters
      #     # - an object that responds to :call with one of the above
      #   end
      def shard(*args)
        if args.first == :associated
          using = args.last[:using] if args.last.respond_to?(:[])
          raise ArgumentError.new(":associated specified without :using") if using.nil? 
          @dynashard_association_using = using
        else
          shard_by = args.first[:by] if args.first.respond_to?(:[])
          raise ArgumentError.new("Invalid options") if shard_by.nil?
          @dynashard_context = shard_by
        end
      end

      # Returns true if sharding has been globally enabled and has been configured for this model
      def sharding_enabled?
        Dynashard.enabled? && !@dynashard_context.nil?
      end

      # Returns true if sharding has been globally enabled and is configured to be used for
      # sharded models associated with this model
      def shards_associated?
        Dynashard.enabled? && !@dynashard_association_using.nil?
      end

      # Returns true if the class was generated by Dynashard
      def dynashard_model?
        false
      end

      # Return a subclass configured to connect to the appropriate shard
      def dynashard_sharded_subclass
        if sharding_enabled?
          spec = Dynashard.shard_context[dynashard_context]
          raise "Missing #{dynashard_context} shard context" if spec.nil?
          spec = spec.call if spec.respond_to?(:call)
          shard_klass = Dynashard.class_for(spec)
          Dynashard.sharded_model_class(shard_klass, self)
        end
      end

      # Returns the shard context for this model
      def dynashard_context
        @dynashard_context
      end

      # Returns the method used to set the context used for associated models
      def dynashard_association_using
        @dynashard_association_using
      end
    end
  end
end

ActiveRecord::Base.extend(Dynashard::ActiveRecordExtensions)
